/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.MenuItemDto;
import org.openapitools.model.MenuItemOptionDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-01-17T18:11:48.695722-08:00[America/Los_Angeles]")
@Validated
@Api(value = "admin", description = "the admin API")
public interface AdminApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /admin/menuItem/add : Add a MenuItem, with optional MenuItemOptions.
     * Add a MenuItem, complete with MenuItemOptions, to the database. Since MenuItemOptions are always linked to specific MenuItems, they are created, updated, and removed by using the MenuItem API. More options may be added later with the /MenuItem/addOption/ API. 
     *
     * @param menuItemDto Complete MenuItem, with MenuItemOptions (required)
     * @return Menu Item Created (status code 201)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "Add a MenuItem, with optional MenuItemOptions.", nickname = "addMenuItem", notes = "Add a MenuItem, complete with MenuItemOptions, to the database. Since MenuItemOptions are always linked to specific MenuItems, they are created, updated, and removed by using the MenuItem API. More options may be added later with the /MenuItem/addOption/ API. ", response = Integer.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Menu Item Created", response = Integer.class),
        @ApiResponse(code = 400, message = "Bad Request") })
    @PutMapping(
        value = "/admin/menuItem/add",
        produces = { "application/text" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Integer> addMenuItem(@ApiParam(value = "Complete MenuItem, with MenuItemOptions" ,required=true )  @Valid @RequestBody MenuItemDto menuItemDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /admin/menuItem/addOption/{menuItemId} : Add a menuItemOption
     * Add an existing MenuItemOption to a MenuItem. 
     *
     * @param menuItemId ID of the MenuItem getting the new option (required)
     * @param menuItemOptionDto MenuItemOption (required)
     * @return MenuItemOption added (status code 201)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "Add a menuItemOption", nickname = "addMenuItemOption", notes = "Add an existing MenuItemOption to a MenuItem. ", response = Integer.class, authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "MenuItemOption added", response = Integer.class),
        @ApiResponse(code = 400, message = "Bad Request") })
    @PostMapping(
        value = "/admin/menuItem/addOption/{menuItemId}",
        produces = { "application/text" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Integer> addMenuItemOption(@ApiParam(value = "ID of the MenuItem getting the new option",required=true) @PathVariable("menuItemId") Integer menuItemId,@ApiParam(value = "MenuItemOption" ,required=true )  @Valid @RequestBody MenuItemOptionDto menuItemOptionDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /admin/menuItem/deleteOption/{optionId} : Delete a MenuItemOption
     * Delete a MenuItemOption from a MenuItem.
     *
     * @param optionId ID of the MenuItemOpton to delete (required)
     * @return MenuItemOption deleted (status code 200)
     *         or Bad Request (status code 400)
     */
    @ApiOperation(value = "Delete a MenuItemOption", nickname = "deleteOption", notes = "Delete a MenuItemOption from a MenuItem.", authorizations = {
        
        @Authorization(value = "bearerAuth")
         }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "MenuItemOption deleted"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @DeleteMapping(
        value = "/admin/menuItem/deleteOption/{optionId}"
    )
    default ResponseEntity<Void> deleteOption(@ApiParam(value = "ID of the MenuItemOpton to delete",required=true) @PathVariable("optionId") Integer optionId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
