swagger: '2.0'
info:
  description: System to keep track of customer orders
  version: 1.0.0
  title: Customer Orders API
  contact:
    email: SwingGuy1024@yahoo.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /admin/menuItem:
    put:
      summary: Add a MenuItem, with optional MenuItemOptions.
      description: |
        Add a MenuItem, complete with MenuItemOptions, to the database. Since MenuItemOptions are always linked to specific MenuItems, they are created, updated, and removed by using the MenuItem API. More options may be added later with the /MenuItem/addOption/ API.
      operationId: addMenuItem
      parameters:
        - in: body
          name: menuItem
          description: Complete menu item, with MenuItemOptions
          required: true
          schema:
            $ref: '#/definitions/MenuItemDto'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Menu Item Created
          schema:
            type: integer
            format: int32
        400:
          description: Bad Request
          schema:
            type: integer
            format: int32
  /admin/menuItem/addOption/{menuItemId}:
    post:
      summary: Add a menuItemOption
      description: |
        Add a MenuItemOption to a MenuItem.
      operationId: addMenuItemOption
      parameters:
        - in: path
          name: menuItemId
          required: true
          description: ID of the MenuItem getting the new option
          type: integer
          format: int32
        - in: body
          required: true
          name: option
          description: MenuItemOption
          schema:
            $ref: '#/definitions/MenuItemOptionDto'
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        201:
          description: MenuItemOption added
          schema:
            type: integer
            format: int32
        400:
          description: Bad Request
          schema:
            type: integer
            format: int32
  /admin/menuItem/deleteOption/{optionId}:
    delete:
      summary: Delete a MenuItemOption
      description: Delete a MenuItemOption from a MenuItem.
      operationId: deleteOption
      parameters:
        - in: path
          name: optionId
          required: true
          description: ID of the MenuItemOpton to delete
          type: integer
          format: int32
      produces:
        - application/json
      responses:
        200:
          description: MenuItemOption deleted
        400:
          description: Bad Request
          schema:
            type: integer
            format: int32
  /menuItem:
    get:
      summary: Get all menu items.
      description: |
        Retrieve all menu items
      operationId: getAll
      produces:
        - application/json
      responses:
        200:
          description: Found
          schema:
            type: array
            items:
              $ref: '#/definitions/MenuItemDto'
  /menuItem/{id}:
    get:
      summary: Gets a menuItem by ID
      description: Gets a MenuItem by its ID.
      operationId: getMenuItem
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: id of menuItem to find
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: Found
          schema:
            $ref: '#/definitions/MenuItemDto'
        404:
          description: NotFound
  /order:
    put:
      summary: Start a new order
      description: |
        Place an order of a MenuItem, with a list of MenuItemOptions. This creates a new ServerOrder, with a single CustomerOrder for a specific MenuItem, with no options yet.
      operationId: addOrder
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: order
          description: The contents of the order
          schema:
            $ref: '#/definitions/CustomerOrderDto'
          required: true
      responses:
        201:
          description: Order Placed
          schema:
            type: integer
            format: int32
        400:
          description: Bad Request
          schema:
            type: integer
            format: int32
    post:
      summary: Update an order
      description: |
        Update an order for a MenuItem, with a list of MenuItemOptions. This is one way to add items to an order. This may also be done with the /order/addMenuItemOption/ API.
      operationId: updateOrder
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: order
          description: The contents of the order
          required: true
          schema:
            $ref: '#/definitions/CustomerOrderDto'
      responses:
        202:
          description: Order Updated
          schema:
            type: integer
            format: int32

        400:
          description: Bad Request
          schema:
            type: integer
            format: int32
  /order/complete/{id}:
    post:
      summary: Mark an order completed
      description: |
        Mark a server order complete. A Complete server order is an order that has been delivered.
      operationId: completeOrder
      parameters:
        - in: path
          name: id
          description: The id of the completed order
          required: true
          type: integer
          format: int32
      produces:
        - application/json
      responses:
        202:
          description: Order Completed
          schema:
            type: integer
            format: int32
        400:
          description: Bad Request
          schema:
            type: integer
            format: int32
  /order/{id}:
    get:
      summary: search for an order by id
      description: |
        Retrieve an order by its ID.
      operationId: searchForOrder
      produces:
        - applicaton/json
      parameters:
        - in: path
          name: id
          description: id of the order to search for
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: search results found
          schema:
            $ref: '#/definitions/CustomerOrderDto'
        404:
          description: Not found
        400:
          description: bad request
    delete:
      summary: delete an order
      description: |
        Delete an order. This is not the same as marking it complete. Canceled orders should be deleted. Delivered orders should be marked complete.
      operationId: deleteOrder
      parameters:
        - in: path
          name: id
          description: The id of the order to delete. Note that this does not mark it complete. Completed orders should not be deleted, but should be marked complete at /order/complete/.
          required: true
          type: integer
          format: int32
      # produces: 
      # - application/json
      responses:
        202:
          description: Order Deleted
        400:
          description: Bad Request
  /order/addMenuItemOption/{customer_order_id}/{menu_option_id}:
    post:
      summary: Add a menuItemOption to a customer order.
      description: |
        Add a menu item option, taken from the Order's menu item, to the specified open order.
      operationId: addMenuItemOptionToCustomerOrder
      parameters:
        - in: path
          name: customer_order_id
          description: The id of the customer order
          required: true
          type: integer
          format: int32
        - in: path
          name: menu_option_id
          description: The id of Menu Item Option to add
          required: true
          type: integer
          format: int32
      produces:
        - application/json
      responses:
        202:
          description: Addition successful
          schema:
            type: integer
            format: int32
        400:
          description: Bad Request

  /order/search:
    get:
      summary: search for an order by completed status and order date, over a date range
      description: |
        Retrieve a server order by its completed status, with a date range. Returns an array of items. If you leave the starting date blank, it will default to the current date. If you leave the ending field blank, it will default to the start date. Both dates are inclusive, so searching for the same day in both fields will search for that day. Leaving the Complete field blank will cause it to search for all orders, regardless of their complete status. Formats for starting and ending dates are yyyy-MM-ddX or yyyy-MM-ddTHH:mmX for a specific time.
      operationId: searchByComplete
      produces:
        - applicaton/json
      parameters:
        - in: query
          name: complete
          type: boolean
          required: false
          description: |
            If true, search for compete orders. If false, search for incomplete orders. If missing, returns both incomplete and complete in the date range.
        - in: query
          name: startingDate
          required: true
          description: |
            Start of the date range for the order date to search for, inclusive, or the current date if left blank. Format is yyyy-MM-dd or yyyy-MM-dd HH-mm for a specific time. Except the dash between HH and mm is supposed to be a colon, but I can't show it with the build software I'm using.
          type: string
          format: date-time
        - in: query
          name: endingDate
          description: |
            End of the date range for the order date to search for, inclusive. If left blank, the current date is used. Format is yyyy-MM-ddX or yyyy-MM-ddTHH:mmX for a specific time
          type: string
          format: date-time
          required: false
      responses:
        200:
          description: search results found
          schema:
            # I could return a ServerOrderDto or an array of CustomerOrderDtos
            # A ServerOrderDto is just an array.
            type: array
            items:
              $ref: '#/definitions/CustomerOrderDto'
        404:
          description: Not found
          schema:
            type: integer
            format: int32
        400:
          description: bad request
          schema:
            type: integer
            format: int32
  /login:
    post:
      summary: Log in to the system
      operationId: login
      parameters:
        - in: body
          required: true
          name: user
          description: user details
          schema:
            $ref: '#/definitions/UserDto'
        required: true
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        200:
          description: Successful Login
          schema:
            type: string
        401:
          description: Unauthorized

definitions:
  MenuItemOptionDto:
    type: object
    description: Option for a MenuItem
    properties:
      name:
        type: string
      deltaPrice:
        type: number
        format: int32
        description: Floating point price. Strings are easier to work with.
      id:
        type: integer
        format: int32
  MenuItemDto:
    type: object
    properties:
      name:
        type: string
      itemPrice:
        type: string
        description: Floating point price. Strings are easier to work with.
      allowedOptions:
        type: array
        items:
          $ref: '#/definitions/MenuItemOptionDto'
      id:
        type: integer
        format: int32
    required:
      - name
      - itemPrice
  CustomerOrderDto:
    properties:
      menuItem:
        $ref: '#/definitions/MenuItemDto'
      options:
        type: array
        items:
          $ref: '#/definitions/MenuItemOptionDto'
      complete:
        type: boolean
        description: Order complete
      id:
        type: integer
        format: int32
      orderTime:
        type: string
        format: date-time
      completeTime:
        type: string
        format: date-time
  UserDto:
    properties:
      id:
        type: integer
        format: int32
      username:
        type: string
        description: username
      password:
        type: string
        format: password
        description: username
      email:
        type: string
        description: username
      mobilePhone:
        type: string
        description: username
      role:
        type: string
        enum: [ CUSTOMER, ADMIN ]
        description: username
# Note on numbers:
#   integer int32     gives Integer
#   integer int64     gives Long
#   number  int32     gives BigDecimal
#   number  int64     gives BigDecimal
#   number  double    gives Double
#   number  float     gives Float
#   string            gives String
#   string  byte      gives byte[ ]
#   string  binary    gives File
#   string  date      gives LocalDate
#   string  date-time gives OffsetDateTime
#   string  password  gives String
#   boolean           gives Boolean
# Undocumented:
#   integer byte      gives Integer
#   integer binary    gives Integer
#   integer date      gives Integer
#   string  int32     gives String
#   string  int64     gives String
# I don't know how to get BigInteger.
    required:
      - id
      - message
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
schemes:
  - https
  - http
# Added by API Auto Mocking Plugin
basePath: /NeptuneDreams/FoodOrders/1.0.0